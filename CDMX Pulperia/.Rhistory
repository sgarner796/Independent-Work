})
# Render details dynamically
render_gt({
req(input$selected_alcaldia)  # Require user input
details_data %>%
filter(Alcaldía == input$selected_alcaldia) %>%
gt() %>%
tab_header(
title = paste("Detalles para", input$selected_alcaldia),
subtitle = "Negocios y teléfonos disponibles"
) %>%
cols_label(
Alcaldía = "Alcaldía",
Negocio = "Negocio",
Telefono = "Teléfono"
)
})
# Load data
abrrts <- read.xlsx("abrrts_analisis.xlsx")
# Prepare summary data
summary_data <- abrrts %>%
group_by(Alcaldía) %>%
summarise(
avg_telefono = mean(Telefono_binary, na.rm = TRUE),
avg_correo = mean(Correo_binary, na.rm = TRUE),
avg_website = mean(Pagina_binary, na.rm = TRUE),
avg_count = mean(Count_non_missing_percentage, na.rm = TRUE) / 100,
PEA = as.numeric(first(PEA)) / 100,
Ingresos = as.numeric(first(ingresos))
) %>%
arrange(desc(PEA))
# Create details data
details_data <- abrrts %>%
select(Alcaldía, nom_estab, Telefono) %>%
filter(!is.na(Telefono))
# Define UI
ui <- fluidPage(
titlePanel("Análisis Abarrotes CDMX"),
sidebarLayout(
sidebarPanel(
selectInput("selected_alcaldia", "Selecciona una Alcaldía:",
choices = unique(summary_data$Alcaldía),
selected = NULL)
),
mainPanel(
h3("Resumen de Accesibilidad Digital por Alcaldía"),
gt_output("summary_table"),
conditionalPanel(
condition = "input.selected_alcaldia != ''",
h3("Detalles"),
gt_output("details_table")
)
)
)
)
# Define Server
server <- function(input, output, session) {
output$summary_table <- render_gt({
summary_data %>%
gt() %>%
tab_header(
title = "Resumen de Accesibilidad Digital por Alcaldía",
subtitle = "Promedios de disponibilidad de contacto y variables socioeconómicas"
) %>%
cols_label(
Alcaldía = "Alcaldía",
avg_telefono = "Teléfono (%)",
avg_correo = "Correo (%)",
avg_website = "Página Web (%)",
avg_count = "Promedio de Comunicación (%)",
PEA = "PEA (%)",
Ingresos = "Ingresos Promedio"
) %>%
fmt_percent(
columns = c(avg_telefono, avg_correo, avg_website, avg_count, PEA),
decimals = 2
) %>%
fmt_number(
columns = c(Ingresos),
decimals = 2,
use_seps = TRUE
)
})
output$details_table <- render_gt({
req(input$selected_alcaldia)
details_data %>%
filter(Alcaldía == input$selected_alcaldia) %>%
gt() %>%
tab_header(
title = paste("Detalles para", input$selected_alcaldia),
subtitle = "Negocios y teléfonos disponibles"
) %>%
cols_label(
Alcaldía = "Alcaldía",
nom_estab = "Negocio",
Telefono = "Teléfono"
)
})
}
# Run App
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(gt)
library(openxlsx)
# Load data
abrrts <- read.xlsx("abrrts_analisis.xlsx")
# Prepare summary data
summary_data <- abrrts %>%
group_by(Alcaldía) %>%
summarise(
avg_telefono = mean(Telefono_binary, na.rm = TRUE),
avg_correo = mean(Correo_binary, na.rm = TRUE),
avg_website = mean(Pagina_binary, na.rm = TRUE),
avg_count = mean(Count_non_missing_percentage, na.rm = TRUE) / 100,
PEA = as.numeric(first(PEA)) / 100,
Ingresos = as.numeric(first(ingresos))
) %>%
arrange(desc(PEA))
# Create details data
details_data <- abrrts %>%
select(Alcaldía, nom_estab, Telefono) %>%
filter(!is.na(Telefono))
# Define UI
ui <- fluidPage(
titlePanel("Análisis Abarrotes CDMX"),
sidebarLayout(
sidebarPanel(
h4("Haz clic en una Alcaldía para desplegar la lista de negocios")
),
mainPanel(
h3("Resumen de Accesibilidad Digital por Alcaldía"),
gt_output("summary_table"),
uiOutput("details_ui")
)
)
)
# Define Server
server <- function(input, output, session) {
output$summary_table <- render_gt({
summary_data %>%
gt() %>%
tab_header(
title = "Resumen de Accesibilidad Digital por Alcaldía",
subtitle = "Promedios de disponibilidad de contacto y variables socioeconómicas"
) %>%
cols_label(
Alcaldía = "Alcaldía",
avg_telefono = "Teléfono (%)",
avg_correo = "Correo (%)",
avg_website = "Página Web (%)",
avg_count = "Promedio de Comunicación (%)",
PEA = "PEA (%)",
Ingresos = "Ingresos Promedio"
) %>%
fmt_percent(
columns = c(avg_telefono, avg_correo, avg_website, avg_count, PEA),
decimals = 2
) %>%
fmt_number(
columns = c(Ingresos),
decimals = 2,
use_seps = TRUE
) %>%
text_transform(
locations = cells_body(columns = Alcaldía),
fn = function(x) {
paste0("<a href='#' onclick=\"Shiny.setInputValue('selected_alcaldia', '", x, "', {priority: 'event'})\">", x, "</a>")
}
)
})
output$details_ui <- renderUI({
req(input$selected_alcaldia)
tagList(
h3(paste("Detalles para", input$selected_alcaldia)),
gt_output("details_table")
)
})
output$details_table <- render_gt({
req(input$selected_alcaldia)
details_data %>%
filter(Alcaldía == input$selected_alcaldia) %>%
gt() %>%
tab_header(
title = paste("Detalles para", input$selected_alcaldia),
subtitle = "Negocios y teléfonos disponibles"
) %>%
cols_label(
Alcaldía = "Alcaldía",
nom_estab = "Negocio",
Telefono = "Teléfono"
)
})
}
# Run App
shinyApp(ui = ui, server = server)
setwd("M:/p/GitHub/Independent Work/CDMX Pulperia/app")
library(rsconnect)
# Load data
abrrts <- read.xlsx(here::here("abrrts_analisis.xlsx"))
# Prepare summary data
summary_data <- abrrts %>%
group_by(Alcaldía) %>%
summarise(
avg_telefono = mean(Telefono_binary, na.rm = TRUE),
avg_correo = mean(Correo_binary, na.rm = TRUE),
avg_website = mean(Pagina_binary, na.rm = TRUE),
avg_count = mean(Count_non_missing_percentage, na.rm = TRUE) / 100,
PEA = as.numeric(first(PEA)) / 100,
Ingresos = as.numeric(first(ingresos))
) %>%
arrange(desc(PEA))
setwd("C:/Users/YourUser/Documents/GitHub/Independent Work/CDMX Pulperia/app")
setwd("M:/p/GitHub/Independent Work/CDMX Pulperia/app")
rsconnect::deployApp()
rsconnect::deployApp(appName = "CDMX-Pulperia-App")
library(shiny)
library(tidyverse)
library(gt)
library(openxlsx)
# Load data
abrrts <- read.xlsx(here::here("abrrts_analisis.xlsx"))
abrrts <- read.xlsx(("abrrts_analisis.xlsx")
library(shiny)
library(shiny)
library(tidyverse)
library(gt)
library(openxlsx)
# Load data
abrrts <- read.xlsx("abrrts_analisis.xlsx")
# Prepare summary data
summary_data <- abrrts %>%
group_by(Alcaldía) %>%
summarise(
avg_telefono = mean(Telefono_binary, na.rm = TRUE),
avg_correo = mean(Correo_binary, na.rm = TRUE),
avg_website = mean(Pagina_binary, na.rm = TRUE),
avg_count = mean(Count_non_missing_percentage, na.rm = TRUE) / 100,
PEA = as.numeric(first(PEA)) / 100,
Ingresos = as.numeric(first(ingresos))
) %>%
arrange(desc(PEA))
# Create details data
details_data <- abrrts %>%
select(Alcaldía, nom_estab, Telefono) %>%
filter(!is.na(Telefono))
# Define UI
ui <- fluidPage(
titlePanel("Análisis Abarrotes CDMX"),
sidebarLayout(
sidebarPanel(
h4("Haz clic en una Alcaldía para desplegar la lista de negocios")
),
mainPanel(
h3("Resumen de Accesibilidad Digital por Alcaldía"),
gt_output("summary_table"),
uiOutput("details_ui")
)
)
)
# Define Server
server <- function(input, output, session) {
output$summary_table <- render_gt({
summary_data %>%
gt() %>%
tab_header(
title = "Resumen de Accesibilidad Digital por Alcaldía",
subtitle = "Promedios de disponibilidad de contacto y variables socioeconómicas"
) %>%
cols_label(
Alcaldía = "Alcaldía",
avg_telefono = "Teléfono (%)",
avg_correo = "Correo (%)",
avg_website = "Página Web (%)",
avg_count = "Promedio de Comunicación (%)",
PEA = "PEA (%)",
Ingresos = "Ingresos Promedio"
) %>%
fmt_percent(
columns = c(avg_telefono, avg_correo, avg_website, avg_count, PEA),
decimals = 2
) %>%
fmt_number(
columns = c(Ingresos),
decimals = 2,
use_seps = TRUE
) %>%
text_transform(
locations = cells_body(columns = Alcaldía),
fn = function(x) {
paste0("<a href='#' onclick=\"Shiny.setInputValue('selected_alcaldia', '", x, "', {priority: 'event'})\">", x, "</a>")
}
)
})
output$details_ui <- renderUI({
req(input$selected_alcaldia)
tagList(
h3(paste("Detalles para", input$selected_alcaldia)),
gt_output("details_table")
)
})
output$details_table <- render_gt({
req(input$selected_alcaldia)
details_data %>%
filter(Alcaldía == input$selected_alcaldia) %>%
gt() %>%
tab_header(
title = paste("Detalles para", input$selected_alcaldia),
subtitle = "Negocios y teléfonos disponibles"
) %>%
cols_label(
Alcaldía = "Alcaldía",
nom_estab = "Negocio",
Telefono = "Teléfono"
)
})
}
# Run App
shinyApp(ui = ui, server = server)
setwd("M:/p/GitHub/Independent Work/CDMX Pulperia")
View(abrrts)
View(shapefile_data_colonias)
View(shapefile_data_alcadias)
glipse(abrrts)
library(tidyverse)
library(sf)
glimpse(abrrts)
colonias <- st_read("poligonos_alcaldias_cdmx.shp")
abrrts <- read.xlsx("abrrts_analisis.xlsx")
# Convert necessary columns to numeric
abrrts <- abrrts %>%
mutate(
Telefono_binary = as.numeric(Telefono_binary),
Correo_binary = as.numeric(Correo_binary),
Pagina_binary = as.numeric(Pagina_binary),
PEA = as.numeric(PEA),
latitud = as.numeric(latitud),
longitud = as.numeric(longitud)
)
# Aggregate binary indicators by alcaldía
alcaldia_summary <- abrrts %>%
group_by(Alcaldía) %>%
summarise(
Telefono_binary = sum(Telefono_binary, na.rm = TRUE),
Correo_binary = sum(Correo_binary, na.rm = TRUE),
Pagina_binary = sum(Pagina_binary, na.rm = TRUE),
PEA = mean(PEA, na.rm = TRUE)
)
# Merge with shapefile data
colonias <- colonias %>%
left_join(alcaldia_summary, by = c("Alcaldía" = "Alcaldía"))
# Merge with shapefile data
colonias <- colonias %>%
left_join(alcaldia_summary, by = c("Alcaldía" = "Alcaldía"))
# Aggregate binary indicators by alcaldía
alcaldia_summary
# Merge with shapefile data
colonias <- colonias %>%
left_join(alcaldia_summary, by = c("Alcaldía"))
View(colonias)
# Merge with shapefile data
colonias <- colonias %>%
left_join(alcaldia_summary, by = c("Alcaldía " = "NOMGEO"))
colonias <- colonias %>%
left_join(alcaldia_summary, by = c("Alcaldía" = "NOMGEO"))
colonias
colonias <- colonias %>%
left_join(alcaldia_summary, by = c("NOMGEO"= "Alcaldía"))
# Define a function to create the maps
create_map <- function(data, binary_column, title) {
ggplot() +
geom_sf(data = data, aes(fill = PEA), color = "black", size = 0.2) +
scale_fill_viridis_c(option = "magma", name = "PEA Level") +
geom_point(data = abrrts, aes(x = longitud, y = latitud, color = !!sym(binary_column)), alpha = 0.5, size = 1) +
scale_color_manual(values = c("0" = "gray", "1" = "red"), name = binary_column) +
labs(title = title) +
theme_minimal()
}
# Generate maps
map1 <- create_map(colonias, "Telefono_binary", "Phone Presence in Establishments")
map2 <- create_map(colonias, "Correo_binary", "Email Presence in Establishments")
map3 <- create_map(colonias, "Pagina_binary", "Website Presence in Establishments")
# Display maps
print(map1)
print(map1)
map1
alcaldia_summary
abrrts
# Merge PEA values with the shapefile based on Alcaldía
colonias <- colonias %>%
left_join(abrrts %>% select(Alcaldía, PEA) %>% distinct(), by = "Alcaldía")
colonias <- colonias %>%
left_join(abrrts %>% select(Alcaldía, PEA) %>% distinct(), join_by = ("NAMEGEO"="Alcaldía")
View(colonias)
View(colonias)
summary_data <- abrrts %>%
group_by(Alcaldía) %>%
summarise(
avg_telefono = mean(Telefono_binary, na.rm = TRUE),
avg_correo = mean(Correo_binary, na.rm = TRUE),
avg_website = mean(Pagina_binary, na.rm = TRUE),
avg_count = mean(Count_non_missing_percentage, na.rm = TRUE) / 100,
PEA = as.numeric(first(PEA)) / 100,
Ingresos = as.numeric(first(ingresos))
) %>%
arrange(desc(PEA))
View(summary_data)
# Split data into a list of data frames, one for each alcaldía
alcaldia_sheets <- split(details_data, details_data$Alcaldía)
# Create detailed data (mock data for demo purposes)
details_data <- abrrts %>%
select(Alcaldía, nom_estab, Telefono) %>%
filter(!is.na(Telefono))
# Split data into a list of data frames, one for each alcaldía
alcaldia_sheets <- split(details_data, details_data$Alcaldía)
# Define output file name
output_file <- "Alcaldias_Details.xlsx"
# Save to Excel with separate sheets for each alcaldía
write_xlsx(alcaldia_sheets, output_file)
library(readxl)
library(writexl)
# Prepare summary data
summary_data <- abrrts %>%
group_by(Alcaldía) %>%
summarise(
avg_telefono = mean(Telefono_binary, na.rm = TRUE),
avg_correo = mean(Correo_binary, na.rm = TRUE),
avg_website = mean(Pagina_binary, na.rm = TRUE),
avg_count = mean(Count_non_missing_percentage, na.rm = TRUE) / 100,
PEA = as.numeric(first(PEA)) / 100,
Ingresos = as.numeric(first(ingresos))
) %>%
arrange(desc(PEA))
# Create detailed data (mock data for demo purposes)
details_data <- abrrts %>%
select(Alcaldía, nom_estab, Telefono) %>%
filter(!is.na(Telefono))
# Split data into a list of data frames, one for each alcaldía
alcaldia_sheets <- split(details_data, details_data$Alcaldía)
# Define output file name
output_file <- "Alcaldias_Details.xlsx"
# Save to Excel with separate sheets for each alcaldía
write_xlsx(alcaldia_sheets, output_file)
print("Excel file created: Alcaldias_Details.xlsx (one sheet per alcaldía)")
summary_data <- abrrts %>%
group_by(Alcaldía) %>%
summarise(
avg_telefono = mean(Telefono_binary, na.rm = TRUE),
avg_correo = mean(Correo_binary, na.rm = TRUE),
avg_website = mean(Pagina_binary, na.rm = TRUE),
avg_count = mean(Count_non_missing_percentage, na.rm = TRUE) / 100,
PEA = as.numeric(first(PEA)) / 100,
Ingresos = as.numeric(first(ingresos))
) %>%
arrange(desc(PEA))
# Filter establishments with non-missing phone numbers
details_data <- abrrts %>%
select(Alcaldía, nom_estab, Telefono) %>%
filter(!is.na(Telefono) & Telefono != "")
# Split data into a list of data frames, one for each alcaldía
alcaldia_sheets <- split(details_data, details_data$Alcaldía)
# Combine summary data as the first sheet
output_sheets <- list(Summary = summary_data)  # First sheet: Summary
output_sheets <- c(output_sheets, alcaldia_sheets)  # Add alcaldía sheets
# Define output file name
output_file <- "Alcaldias_Details.xlsx"
# Save to Excel with multiple sheets
write_xlsx(output_sheets, output_file)
summary_data <- abrrts %>%
group_by(Alcaldía) %>%
summarise(
avg_telefono = mean(Telefono_binary, na.rm = TRUE),
avg_correo = mean(Correo_binary, na.rm = TRUE),
avg_website = mean(Pagina_binary, na.rm = TRUE),
avg_count = mean(Count_non_missing_percentage, na.rm = TRUE) / 100,
PEA = as.numeric(first(PEA)) / 100,
Ingresos = as.numeric(first(ingresos))
) %>%
arrange(desc(PEA))
# Filter establishments with non-missing phone numbers
details_data <- abrrts %>%
select(Alcaldía, nom_estab, Telefono) %>%
filter(!is.na(Telefono) & Telefono != "")
# Split data into a list of data frames, one for each alcaldía
alcaldia_sheets <- split(details_data, details_data$Alcaldía)
# Combine summary data as the first sheet
output_sheets <- list(Summary = summary_data)  # First sheet: Summary
output_sheets <- c(output_sheets, alcaldia_sheets)  # Add alcaldía sheets
# Define output file name
output_file <- "Alcaldias_Details.xlsx"
# Save to Excel with multiple sheets
write_xlsx(output_sheets, output_file)
print("Excel file created: Alcaldias_Details.xlsx (Summary + one sheet per alcaldía)")
# Order alcaldías based on the custom list
desired_order <- c(
"Benito Juárez", "Cuauhtémoc", "Miguel Hidalgo", "Milpa Alta",
"Cuajimalpa de Morelos", "Venustiano Carranza", "Álvaro Obregón",
"Tlalpan", "Iztacalco", "Iztapalapa", "Azcapotzalco",
"Xochimilco", "Tláhuac", "La Magdalena Contreras",
"Coyoacán", "Gustavo A. Madero"
)
# Split data into a list of data frames, one for each alcaldía, in the desired order
alcaldia_sheets <- split(details_data, details_data$Alcaldía)
alcaldia_sheets <- alcaldia_sheets[desired_order]
# Combine summary data as the first sheet
output_sheets <- list(Summary = summary_data)  # First sheet: Summary
output_sheets <- c(output_sheets, alcaldia_sheets)  # Add ordered alcaldía sheets
# Define output file name
output_file <- "Alcaldias_Details_Ordered.xlsx"
# Save to Excel with multiple sheets in the desired order
write_xlsx(output_sheets, output_file)
print("Excel file created: Alcaldias_Details_Ordered.xlsx (Summary + sheets in custom order)")
